
struct sume_metadata_t {
  dma_q_size : 16,
  nf3_q_size : 16,
  nf2_q_size : 16,
  nf1_q_size : 16,
  nf0_q_size : 16,
  send_dig_to_cpu : 8,
  drop : 8,
  dst_port : 8,
  src_port : 8,
  pkt_len : 16 }
struct Ethernet_h {
  isValid : 1,
  dstAddr : 48,
  srcAddr : 48,
  etherType : 16 }
struct Vlan_h {
  isValid : 1,
  prio : 3,
  dropEligible : 1,
  vlanId : 12,
  etherType : 16 }
struct IPv4_h {
  isValid : 1,
  version : 4,
  ihl : 4,
  tos : 8,
  totalLen : 16,
  identification : 16,
  flags : 3,
  fragOffset : 13,
  ttl : 8,
  protocol : 8,
  hdrChecksum : 16,
  srcAddr : 32,
  dstAddr : 32 }
struct Parsed_packet {
  ethernet : Ethernet_h,
  vlan : Vlan_h,
  ipv4 : IPv4_h }
struct routing_metadata_t {
  nhop_ipv4 : 32 }
struct user_metadata_t {
  routing_metadata : routing_metadata_t }
struct digest_data_t {
  unused : 256 }
class digest_data_t_0::Tuple(out) {
  struct {
    unused : 256 } }
class sume_metadata_t_0::Tuple(inout) {
  struct {
    dma_q_size : 16,
    nf3_q_size : 16,
    nf2_q_size : 16,
    nf1_q_size : 16,
    nf0_q_size : 16,
    send_dig_to_cpu : 8,
    drop : 8,
    dst_port : 8,
    src_port : 8,
    pkt_len : 16 } }
class TopParser_t::ParsingEngine(16384,4,start) {
  class hdr_t::Tuple(out) {
    struct {
      ethernet : Ethernet_h,
      vlan : Vlan_h,
      ipv4 : IPv4_h } }
  class user_metadata_t_0::Tuple(out) {
    struct {
      routing_metadata : routing_metadata_t } }
  class digest_data_t_0::Tuple(out) {
    struct {
      unused : 256 } }
  class sume_metadata_t_0::Tuple(inout) {
    struct {
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class TopParser_extracts_t::Tuple(out) {
    struct {
      size : 32 } }
  hdr_t hdr;
  user_metadata_t_0 user_metadata;
  digest_data_t_0 digest_data;
  sume_metadata_t_0 sume_metadata;
  TopParser_extracts_t TopParser_extracts;
  class start::Section(1) {
    struct {
      dstAddr_0 : 48,
      srcAddr_0 : 48,
      etherType_0 : 16 }
    map transition_0 {
      (33024, parse_vlan),
      reject }
    method update = {
      hdr.ethernet.isValid = 1,
      hdr.ethernet.dstAddr = dstAddr_0,
      hdr.ethernet.srcAddr = srcAddr_0,
      hdr.ethernet.etherType = etherType_0,
      TopParser_extracts.size = (TopParser_extracts.size + 112),
      digest_data.unused = 0,
      user_metadata.routing_metadata.nhop_ipv4 = 0 }
    method move_to_section = transition_0(etherType_0);
    method increment_offset = 112; }
  class parse_vlan::Section(2) {
    struct {
      prio_0 : 3,
      dropEligible_0 : 1,
      vlanId_0 : 12,
      etherType_1 : 16 }
    map transition_1 {
      (2048, parse_ipv4),
      accept }
    method update = {
      hdr.vlan.isValid = 1,
      hdr.vlan.prio = prio_0,
      hdr.vlan.dropEligible = dropEligible_0,
      hdr.vlan.vlanId = vlanId_0,
      hdr.vlan.etherType = etherType_1,
      TopParser_extracts.size = (TopParser_extracts.size + 32) }
    method move_to_section = transition_1(etherType_1);
    method increment_offset = 32; }
  class parse_ipv4::Section(3) {
    struct {
      version_0 : 4,
      ihl_0 : 4,
      tos_0 : 8,
      totalLen_0 : 16,
      identification_0 : 16,
      flags_0 : 3,
      fragOffset_0 : 13,
      ttl_0 : 8,
      protocol_0 : 8,
      hdrChecksum_0 : 16,
      srcAddr_1 : 32,
      dstAddr_1 : 32 }
    method update = {
      hdr.ipv4.isValid = 1,
      hdr.ipv4.version = version_0,
      hdr.ipv4.ihl = ihl_0,
      hdr.ipv4.tos = tos_0,
      hdr.ipv4.totalLen = totalLen_0,
      hdr.ipv4.identification = identification_0,
      hdr.ipv4.flags = flags_0,
      hdr.ipv4.fragOffset = fragOffset_0,
      hdr.ipv4.ttl = ttl_0,
      hdr.ipv4.protocol = protocol_0,
      hdr.ipv4.hdrChecksum = hdrChecksum_0,
      hdr.ipv4.srcAddr = srcAddr_1,
      hdr.ipv4.dstAddr = dstAddr_1,
      TopParser_extracts.size = (TopParser_extracts.size + 160) }
    method move_to_section = accept;
    method increment_offset = 160; }
  class accept::Section(4) {
    method move_to_section = done(0);
    method increment_offset = 0; }
  class reject::Section(2) {
    method move_to_section = done(0);
    method increment_offset = 0; } }
struct set_dmac_0_cp {
  dmac : 48,
  port : 8 }
struct set_nhop_0_cp {
  nhop_ipv4 : 32 }
struct set_smac_0_cp {
  smac : 48 }
class TopPipe_lvl_t::TupleEngine(1,setup) {
  class digest_data_t_1::Tuple(inout) {
    struct {
      unused : 256 } }
  class hdr_t_0::Tuple(inout) {
    struct {
      ethernet : Ethernet_h,
      vlan : Vlan_h,
      ipv4 : IPv4_h } }
  class local_state_t::Tuple(out) {
    struct {
      id : 16 } }
  class sume_metadata_t_1::Tuple(inout) {
    struct {
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class user_metadata_t_1::Tuple(inout) {
    struct {
      routing_metadata : routing_metadata_t } }
  class ipv4_nhop_req_t::Tuple(out) {
    struct {
      lookup_request_key_1 : 32 } }
  digest_data_t_1 digest_data;
  hdr_t_0 hdr;
  local_state_t local_state;
  sume_metadata_t_1 sume_metadata;
  user_metadata_t_1 user_metadata;
  ipv4_nhop_req_t ipv4_nhop_req;
  class setup::Section(1) {
    method update = {
      ipv4_nhop_req.lookup_request_key_1 = hdr.ipv4.dstAddr }
    method move_to_section = done(0);
    method increment_offset = 0; } }
class ipv4_nhop_t::LookupEngine(EM,64,32,34,1,0) {
  class ipv4_nhop_req_t::Tuple(in) {
    struct {
      lookup_request_key_1 : 32 } }
  class ipv4_nhop_resp_t::Tuple(out) {
    struct {
      hit : 1,
      action_run : 2,
      set_nhop_0 : set_nhop_0_cp } }
  ipv4_nhop_req_t request;
  ipv4_nhop_resp_t response;
  method send_request = { key = request }
  method receive_response = { response = value } }
class TopPipe_lvl_0_t::TupleEngine(4,condition_sec) {
  class digest_data_t_1::Tuple(inout) {
    struct {
      unused : 256 } }
  class hdr_t_0::Tuple(inout) {
    struct {
      ethernet : Ethernet_h,
      vlan : Vlan_h,
      ipv4 : IPv4_h } }
  class local_state_t::Tuple(inout) {
    struct {
      id : 16 } }
  class sume_metadata_t_1::Tuple(inout) {
    struct {
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class user_metadata_t_1::Tuple(inout) {
    struct {
      routing_metadata : routing_metadata_t } }
  class forward_table_req_t::Tuple(out) {
    struct {
      lookup_request_key_0 : 32 } }
  class ipv4_nhop_resp_t::Tuple(inout) {
    struct {
      hit : 1,
      action_run : 2,
      set_nhop_0 : set_nhop_0_cp } }
  digest_data_t_1 digest_data;
  hdr_t_0 hdr;
  local_state_t local_state;
  sume_metadata_t_1 sume_metadata;
  user_metadata_t_1 user_metadata;
  forward_table_req_t forward_table_req;
  ipv4_nhop_resp_t ipv4_nhop_resp;
  class NoAction_4_sec::Section(3) {
    method update = {
      forward_table_req.lookup_request_key_0 = user_metadata.routing_metadata.nhop_ipv4,
      local_state.id = 6 }
    method move_to_section = local_end;
    method increment_offset = 0; }
  class condition_sec::Section(1) {
    method update = {
      local_state.id = 14 }
    method move_to_section = if ((hdr.ipv4.isValid && (hdr.ipv4.ttl > 0))) ipv4_nhop_sec else local_end;
    method increment_offset = 0; }
  class drop_4_sec::Section(3) {
    method update = {
      sume_metadata.drop = 1,
      sume_metadata.dst_port = 0,
      forward_table_req.lookup_request_key_0 = user_metadata.routing_metadata.nhop_ipv4,
      local_state.id = 6 }
    method move_to_section = local_end;
    method increment_offset = 0; }
  class ipv4_nhop_sec::Section(2) {
    map action_select_1 {
      (1, set_nhop_0_sec),
      (2, drop_4_sec),
      (3, NoAction_4_sec),
      NoAction_4_sec }
    method move_to_section = if ((ipv4_nhop_resp.hit == 1)) action_select_1(ipv4_nhop_resp.action_run) else NoAction_4_sec;
    method increment_offset = 0; }
  class local_end::Section(4) {
    method move_to_section = done(0);
    method increment_offset = 0; }
  class set_nhop_0_sec::Section(3) {
    method update = {
      user_metadata.routing_metadata.nhop_ipv4 = ipv4_nhop_resp.set_nhop_0.nhop_ipv4,
      hdr.ipv4.ttl = (hdr.ipv4.ttl + 255),
      forward_table_req.lookup_request_key_0 = ipv4_nhop_resp.set_nhop_0.nhop_ipv4,
      local_state.id = 6 }
    method move_to_section = local_end;
    method increment_offset = 0; } }
class forward_table_t::LookupEngine(EM,64,32,58,1,0) {
  class forward_table_req_t::Tuple(in) {
    struct {
      lookup_request_key_0 : 32 } }
  class forward_table_resp_t::Tuple(out) {
    struct {
      hit : 1,
      action_run : 2,
      set_dmac_0 : set_dmac_0_cp } }
  forward_table_req_t request;
  forward_table_resp_t response;
  method send_request = { key = request }
  method receive_response = { response = value } }
class TopPipe_lvl_1_t::TupleEngine(4,local_start) {
  class digest_data_t_1::Tuple(inout) {
    struct {
      unused : 256 } }
  class hdr_t_0::Tuple(inout) {
    struct {
      ethernet : Ethernet_h,
      vlan : Vlan_h,
      ipv4 : IPv4_h } }
  class ipv4_nhop_resp_t::Tuple(inout) {
    struct {
      hit : 1,
      action_run : 2,
      set_nhop_0 : set_nhop_0_cp } }
  class local_state_t::Tuple(inout) {
    struct {
      id : 16 } }
  class sume_metadata_t_1::Tuple(inout) {
    struct {
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class user_metadata_t_1::Tuple(inout) {
    struct {
      routing_metadata : routing_metadata_t } }
  class send_frame_req_t::Tuple(out) {
    struct {
      lookup_request_padding : 4,
      lookup_request_key : 8 } }
  class forward_table_resp_t::Tuple(inout) {
    struct {
      hit : 1,
      action_run : 2,
      set_dmac_0 : set_dmac_0_cp } }
  digest_data_t_1 digest_data;
  hdr_t_0 hdr;
  ipv4_nhop_resp_t ipv4_nhop_resp;
  local_state_t local_state;
  sume_metadata_t_1 sume_metadata;
  user_metadata_t_1 user_metadata;
  send_frame_req_t send_frame_req;
  forward_table_resp_t forward_table_resp;
  class NoAction_0_sec::Section(3) {
    method update = {
      send_frame_req.lookup_request_key = sume_metadata.dst_port,
      local_state.id = 10 }
    method move_to_section = local_end_0;
    method increment_offset = 0; }
  class drop_0_sec::Section(3) {
    method update = {
      sume_metadata.drop = 1,
      sume_metadata.dst_port = 0,
      send_frame_req.lookup_request_key = 0,
      local_state.id = 10 }
    method move_to_section = local_end_0;
    method increment_offset = 0; }
  class forward_table_sec::Section(2) {
    map action_select_0 {
      (1, set_dmac_0_sec),
      (2, drop_0_sec),
      (3, NoAction_0_sec),
      NoAction_0_sec }
    method move_to_section = if ((forward_table_resp.hit == 1)) action_select_0(forward_table_resp.action_run) else NoAction_0_sec;
    method increment_offset = 0; }
  class local_end_0::Section(4) {
    method move_to_section = done(0);
    method increment_offset = 0; }
  class local_start::Section(1) {
    map transition {
      (6, forward_table_sec),
      local_end_0 }
    method move_to_section = transition(local_state.id);
    method increment_offset = 0; }
  class set_dmac_0_sec::Section(3) {
    method update = {
      hdr.ethernet.dstAddr = forward_table_resp.set_dmac_0.dmac,
      sume_metadata.dst_port = forward_table_resp.set_dmac_0.port,
      send_frame_req.lookup_request_key = forward_table_resp.set_dmac_0.port,
      local_state.id = 10 }
    method move_to_section = local_end_0;
    method increment_offset = 0; } }
class send_frame_t::LookupEngine(EM,64,12,50,1,0) {
  class send_frame_req_t::Tuple(in) {
    struct {
      lookup_request_padding : 4,
      lookup_request_key : 8 } }
  class send_frame_resp_t::Tuple(out) {
    struct {
      hit : 1,
      action_run : 2,
      set_smac_0 : set_smac_0_cp } }
  send_frame_req_t request;
  send_frame_resp_t response;
  method send_request = { key = request }
  method receive_response = { response = value } }
class TopPipe_lvl_2_t::TupleEngine(4,local_start_0) {
  class digest_data_t_1::Tuple(inout) {
    struct {
      unused : 256 } }
  class forward_table_resp_t::Tuple(in) {
    struct {
      hit : 1,
      action_run : 2,
      set_dmac_0 : set_dmac_0_cp } }
  class hdr_t_0::Tuple(inout) {
    struct {
      ethernet : Ethernet_h,
      vlan : Vlan_h,
      ipv4 : IPv4_h } }
  class ipv4_nhop_resp_t::Tuple(in) {
    struct {
      hit : 1,
      action_run : 2,
      set_nhop_0 : set_nhop_0_cp } }
  class local_state_t::Tuple(in) {
    struct {
      id : 16 } }
  class sume_metadata_t_1::Tuple(inout) {
    struct {
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class user_metadata_t_1::Tuple(inout) {
    struct {
      routing_metadata : routing_metadata_t } }
  class send_frame_resp_t::Tuple(in) {
    struct {
      hit : 1,
      action_run : 2,
      set_smac_0 : set_smac_0_cp } }
  digest_data_t_1 digest_data;
  forward_table_resp_t forward_table_resp;
  hdr_t_0 hdr;
  ipv4_nhop_resp_t ipv4_nhop_resp;
  local_state_t local_state;
  sume_metadata_t_1 sume_metadata;
  user_metadata_t_1 user_metadata;
  send_frame_resp_t send_frame_resp;
  class NoAction_5_sec::Section(3) {
    method move_to_section = sink;
    method increment_offset = 0; }
  class drop_5_sec::Section(3) {
    method update = {
      sume_metadata.drop = 1,
      sume_metadata.dst_port = 0 }
    method move_to_section = sink;
    method increment_offset = 0; }
  class local_start_0::Section(1) {
    map transition {
      (10, send_frame_sec),
      (14, sink),
      done(0) }
    method move_to_section = transition(local_state.id);
    method increment_offset = 0; }
  class send_frame_sec::Section(2) {
    map action_select {
      (1, set_smac_0_sec),
      (2, drop_5_sec),
      (3, NoAction_5_sec),
      NoAction_5_sec }
    method move_to_section = if ((send_frame_resp.hit == 1)) action_select(send_frame_resp.action_run) else NoAction_5_sec;
    method increment_offset = 0; }
  class set_smac_0_sec::Section(3) {
    method update = {
      hdr.ethernet.srcAddr = send_frame_resp.set_smac_0.smac }
    method move_to_section = sink;
    method increment_offset = 0; }
  class sink::Section(4) {
    method move_to_section = done(0);
    method increment_offset = 0; } }
class TopDeparser_t::EditingEngine(16384,5,extract_headers_sec) {
  class hdr_t_1::Tuple(in) {
    struct {
      ethernet : Ethernet_h,
      vlan : Vlan_h,
      ipv4 : IPv4_h } }
  class user_metadata_t_2::Tuple(in) {
    struct {
      routing_metadata : routing_metadata_t } }
  class digest_data_t_2::Tuple(inout) {
    struct {
      unused : 256 } }
  class sume_metadata_t_2::Tuple(inout) {
    struct {
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class TopDeparser_extracts_t::Tuple(in) {
    struct {
      size : 32 } }
  hdr_t_1 hdr;
  user_metadata_t_2 user_metadata;
  digest_data_t_2 digest_data;
  sume_metadata_t_2 sume_metadata;
  TopDeparser_extracts_t TopDeparser_extracts;
  class act_sec::Section(2) {
    method move_to_section = emit_2;
    method increment_offset = 0; }
  class emit_0::Section(5) {
    struct {
      version : 4,
      ihl : 4,
      tos : 8,
      totalLen : 16,
      identification : 16,
      flags : 3,
      fragOffset : 13,
      ttl : 8,
      protocol : 8,
      hdrChecksum : 16,
      srcAddr : 32,
      dstAddr : 32 }
    method insert = if (hdr.ipv4.isValid) 160 else 0;
    method update = {
      version = hdr.ipv4.version,
      ihl = hdr.ipv4.ihl,
      tos = hdr.ipv4.tos,
      totalLen = hdr.ipv4.totalLen,
      identification = hdr.ipv4.identification,
      flags = hdr.ipv4.flags,
      fragOffset = hdr.ipv4.fragOffset,
      ttl = hdr.ipv4.ttl,
      protocol = hdr.ipv4.protocol,
      hdrChecksum = hdr.ipv4.hdrChecksum,
      srcAddr = hdr.ipv4.srcAddr,
      dstAddr = hdr.ipv4.dstAddr }
    method move_to_section = done(0);
    method increment_offset = 0; }
  class emit_1::Section(4) {
    struct {
      prio : 3,
      dropEligible : 1,
      vlanId : 12,
      etherType : 16 }
    method insert = if (hdr.vlan.isValid) 32 else 0;
    method update = {
      prio = hdr.vlan.prio,
      dropEligible = hdr.vlan.dropEligible,
      vlanId = hdr.vlan.vlanId,
      etherType = hdr.vlan.etherType }
    method move_to_section = emit_0;
    method increment_offset = 0; }
  class emit_2::Section(3) {
    struct {
      dstAddr : 48,
      srcAddr : 48,
      etherType : 16 }
    method insert = if (hdr.ethernet.isValid) 112 else 0;
    method update = {
      dstAddr = hdr.ethernet.dstAddr,
      srcAddr = hdr.ethernet.srcAddr,
      etherType = hdr.ethernet.etherType }
    method move_to_section = emit_1;
    method increment_offset = 0; }
  class extract_headers_sec::Section(1) {
    method remove = TopDeparser_extracts.size;
    method move_to_section = act_sec;
    method increment_offset = 0; } }
class Packet_input::Packet(in) {}
class Packet_output::Packet(out) {}
class vSwitch1::System {
  digest_data_t_0 digest_data;
  sume_metadata_t_0 sume_metadata;
  TopParser_t TopParser;
  TopPipe_lvl_t TopPipe_lvl;
  ipv4_nhop_t ipv4_nhop;
  TopPipe_lvl_0_t TopPipe_lvl_0;
  forward_table_t forward_table;
  TopPipe_lvl_1_t TopPipe_lvl_1;
  send_frame_t send_frame;
  TopPipe_lvl_2_t TopPipe_lvl_2;
  TopDeparser_t TopDeparser;
  Packet_input packet_in;
  Packet_output packet_out;
  method connect = {
    TopPipe_lvl_0.digest_data = TopPipe_lvl.digest_data,
    TopPipe_lvl_0.hdr = TopPipe_lvl.hdr,
    TopPipe_lvl_0.local_state = TopPipe_lvl.local_state,
    TopPipe_lvl_0.sume_metadata = TopPipe_lvl.sume_metadata,
    TopPipe_lvl_0.user_metadata = TopPipe_lvl.user_metadata,
    ipv4_nhop.request = TopPipe_lvl.ipv4_nhop_req,
    TopPipe_lvl_0.ipv4_nhop_resp = ipv4_nhop.response,
    TopPipe_lvl_1.digest_data = TopPipe_lvl_0.digest_data,
    TopPipe_lvl_1.hdr = TopPipe_lvl_0.hdr,
    TopPipe_lvl_1.ipv4_nhop_resp = TopPipe_lvl_0.ipv4_nhop_resp,
    TopPipe_lvl_1.local_state = TopPipe_lvl_0.local_state,
    TopPipe_lvl_1.sume_metadata = TopPipe_lvl_0.sume_metadata,
    TopPipe_lvl_1.user_metadata = TopPipe_lvl_0.user_metadata,
    forward_table.request = TopPipe_lvl_0.forward_table_req,
    TopPipe_lvl_1.forward_table_resp = forward_table.response,
    TopPipe_lvl_2.digest_data = TopPipe_lvl_1.digest_data,
    TopPipe_lvl_2.forward_table_resp = TopPipe_lvl_1.forward_table_resp,
    TopPipe_lvl_2.hdr = TopPipe_lvl_1.hdr,
    TopPipe_lvl_2.ipv4_nhop_resp = TopPipe_lvl_1.ipv4_nhop_resp,
    TopPipe_lvl_2.local_state = TopPipe_lvl_1.local_state,
    TopPipe_lvl_2.sume_metadata = TopPipe_lvl_1.sume_metadata,
    TopPipe_lvl_2.user_metadata = TopPipe_lvl_1.user_metadata,
    send_frame.request = TopPipe_lvl_1.send_frame_req,
    TopPipe_lvl_2.send_frame_resp = send_frame.response,
    TopPipe_lvl.hdr = TopParser.hdr,
    TopDeparser.hdr = TopPipe_lvl_2.hdr,
    TopPipe_lvl.user_metadata = TopParser.user_metadata,
    TopDeparser.user_metadata = TopPipe_lvl_2.user_metadata,
    TopPipe_lvl.digest_data = TopParser.digest_data,
    TopDeparser.digest_data = TopPipe_lvl_2.digest_data,
    digest_data = TopDeparser.digest_data,
    TopParser.sume_metadata = sume_metadata,
    TopPipe_lvl.sume_metadata = TopParser.sume_metadata,
    TopDeparser.sume_metadata = TopPipe_lvl_2.sume_metadata,
    sume_metadata = TopDeparser.sume_metadata,
    TopParser.packet_in = packet_in,
    TopDeparser.packet_in = TopParser.packet_out,
    packet_out = TopDeparser.packet_out,
    TopDeparser.TopDeparser_extracts = TopParser.TopParser_extracts } }